// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "webinar-testing/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, goods
func (_m *Service) Add(ctx context.Context, goods models.Order) error {
	ret := _m.Called(ctx, goods)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, goods)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Service_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - goods models.Order
func (_e *Service_Expecter) Add(ctx interface{}, goods interface{}) *Service_Add_Call {
	return &Service_Add_Call{Call: _e.mock.On("Add", ctx, goods)}
}

func (_c *Service_Add_Call) Run(run func(ctx context.Context, goods models.Order)) *Service_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *Service_Add_Call) Return(_a0 error) *Service_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Add_Call) RunAndReturn(run func(context.Context, models.Order) error) *Service_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, goods
func (_m *Service) Delete(ctx context.Context, goods models.Order) error {
	ret := _m.Called(ctx, goods)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, goods)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Service_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - goods models.Order
func (_e *Service_Expecter) Delete(ctx interface{}, goods interface{}) *Service_Delete_Call {
	return &Service_Delete_Call{Call: _e.mock.On("Delete", ctx, goods)}
}

func (_c *Service_Delete_Call) Run(run func(ctx context.Context, goods models.Order)) *Service_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *Service_Delete_Call) Return(_a0 error) *Service_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Delete_Call) RunAndReturn(run func(context.Context, models.Order) error) *Service_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllByUser provides a mock function with given fields: ctx, id
func (_m *Service) DeleteAllByUser(ctx context.Context, id models.UserID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteAllByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllByUser'
type Service_DeleteAllByUser_Call struct {
	*mock.Call
}

// DeleteAllByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.UserID
func (_e *Service_Expecter) DeleteAllByUser(ctx interface{}, id interface{}) *Service_DeleteAllByUser_Call {
	return &Service_DeleteAllByUser_Call{Call: _e.mock.On("DeleteAllByUser", ctx, id)}
}

func (_c *Service_DeleteAllByUser_Call) Run(run func(ctx context.Context, id models.UserID)) *Service_DeleteAllByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *Service_DeleteAllByUser_Call) Return(_a0 error) *Service_DeleteAllByUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteAllByUser_Call) RunAndReturn(run func(context.Context, models.UserID) error) *Service_DeleteAllByUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function with given fields: ctx, id
func (_m *Service) ListByUser(ctx context.Context, id models.UserID) (models.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) (models.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) models.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type Service_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.UserID
func (_e *Service_Expecter) ListByUser(ctx interface{}, id interface{}) *Service_ListByUser_Call {
	return &Service_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, id)}
}

func (_c *Service_ListByUser_Call) Run(run func(ctx context.Context, id models.UserID)) *Service_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *Service_ListByUser_Call) Return(_a0 models.Order, _a1 error) *Service_ListByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ListByUser_Call) RunAndReturn(run func(context.Context, models.UserID) (models.Order, error)) *Service_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
